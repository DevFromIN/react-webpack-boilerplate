const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CompressionPlugin = require('compression-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const WebpackPwaManifest = require('webpack-pwa-manifest');
const WorkboxPlugin = require('workbox-webpack-plugin');

module.exports = require('./webpack.base')({
  mode: 'production',

  // Utilize long-term caching by adding content hashes (not compilation hashes) to compiled assets
  output: {
    assetModuleFilename: 'static/[hash][ext][query]',
    chunkFilename: '[name].[contenthash].chunk.js',
    filename: '[name].[contenthash].js',
  },

  optimization: {
    minimize: true,
    minimizer: [
      `...`,
      new CssMinimizerPlugin(),
      () => ({
        terserOptions: {
          warnings: false,
          compress: {
            comparisons: false,
          },
          parse: {},
          mangle: true,
          output: {
            comments: false,
            ascii_only: true,
          },
        },

        parallel: true,
        cache: true,
        sourceMap: true,
      }),
    ],

    splitChunks: {
      // include all types of chunks
      chunks: 'all',
      maxInitialRequests: 10,
      minSize: 0,

      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          chunks: 'all',
          name(module) {
            const packageName = module.context.match(
              /[\\/]node_modules[\\/](.*?)([\\/]|$)/,
            )[1];
            return `npm.${packageName.replace('@', '')}`;
          },
        },
      },
    },

    moduleIds: 'deterministic',
    runtimeChunk: 'single',
    nodeEnv: 'production',
    sideEffects: true,
    concatenateModules: true,
  },

  plugins: [
    new webpack.ids.HashedModuleIdsPlugin({
      hashFunction: 'sha256',
      hashDigest: 'hex',
      hashDigestLength: 20,
    }),

    new MiniCssExtractPlugin({
      filename: '[name].[contenthash].css',
      chunkFilename: '[id].[contenthash].css',
      ignoreOrder: false,
    }),

    new CompressionPlugin({
      algorithm: 'gzip',
      test: /\.(js|css|html)$/,
      threshold: 10240,
      minRatio: 0.8,
    }),

    // Minify and optimize the index.html
    new HtmlWebpackPlugin({
      template: 'src/index.html',

      minify: {
        collapseWhitespace: true,
        keepClosingSlash: true,
        removeComments: true,
        removeRedundantAttributes: true,
        removeStyleLinkTypeAttributes: true,
        useShortDoctype: true,
        removeEmptyAttributes: true,
        minifyJS: true,
        minifyCSS: true,
        minifyURLs: true,
      },

      // By default, this plugin will inject all files that are generated by webpack, e.g. bundle.js
      // See https://github.com/jantimon/html-webpack-plugin#options
      inject: true,
    }),

    new WebpackPwaManifest({
      name: 'React Webpack Boilerplate',
      short_name: 'Boilerplate',
      description: 'Updated boilerplate code with React v17 and Webpack v5',
      background_color: '#ffffff',
      display: 'standalone',
      inject: true,
      orientation: 'portrait',
      start_url: '.',
      theme_color: '#000000',
      // crossorigin: 'use-credentials', //can be null, use-credentials or anonymous
      icons: [
        {
          src: path.resolve(process.cwd(), 'src/images/icon.png'),
          sizes: [96, 128, 192, 256, 384, 512], // multiple sizes
        },
        {
          src: path.resolve(process.cwd(), 'src/images/icon.png'),
          size: '1024x1024',
          purpose: 'maskable',
        },
      ],
    }),

    new WorkboxPlugin.GenerateSW({
      // these options encourage the ServiceWorkers to get in there fast
      // and not allow any straggling "old" SWs to hang around
      clientsClaim: true,
      skipWaiting: true,
      cleanupOutdatedCaches: true,
      mode: 'production',
    }),
  ],

  devtool: 'source-map',

  performance: {
    assetFilter: assetFilename =>
      !/(\.map$)|(^(main\.|favicon\.))/.test(assetFilename),
    // hints: 'error',
  },
});
